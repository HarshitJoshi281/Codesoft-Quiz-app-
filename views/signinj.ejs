<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Sign In </title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-dark: #3a0ca3;
      --accent: #4cc9f0;
      --light: #f8f9fa;
      --dark: #212529;
      --white: rgba(255, 255, 255, 0.95);
      --border-radius: 12px;
      --shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body, html {
      height: 100%;
      overflow: hidden;
    }

    .background {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      object-fit: cover;
      z-index: -2;
      filter: brightness(0.7);
    }

    .particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: -1;
    }

    .signin-container {
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 20px;
      animation: fadeIn 0.8s ease-out;
    }

    .signin-box {
      background: var(--white);
      padding: 2.5rem;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow);
      width: 100%;
      max-width: 400px;
      backdrop-filter: blur(8px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      transform-style: preserve-3d;
      perspective: 1000px;
    }

    .signin-box::before {
      content: '';
      position: absolute;
      top: -5px;
      left: -5px;
      right: -5px;
      bottom: -5px;
      background: linear-gradient(45deg, var(--primary), var(--accent));
      z-index: -1;
      border-radius: calc(var(--border-radius) + 5px);
      opacity: 0.3;
      transform: translateZ(-1px);
    }

    .signin-box h2 {
      text-align: center;
      margin-bottom: 2rem;
      color: var(--primary-dark);
      font-size: 2rem;
      font-weight: 600;
      background: linear-gradient(to right, var(--primary), var(--accent));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .input-group {
      position: relative;
      margin-bottom: 1.5rem;
    }

    .input-group i {
      position: absolute;
      top: 50%;
      left: 15px;
      transform: translateY(-50%);
      color: var(--primary);
    }

    .signin-box input {
      width: 100%;
      padding: 15px 15px 15px 45px;
      margin: 5px 0;
      border: 1px solid rgba(0, 0, 0, 0.1);
      border-radius: var(--border-radius);
      font-size: 1rem;
      transition: var(--transition);
      background-color: rgba(255, 255, 255, 0.8);
    }

    .signin-box input:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
    }

    .signin-box button {
      width: 100%;
      padding: 15px;
      background: linear-gradient(to right, var(--primary), var(--primary-dark));
      border: none;
      color: white;
      font-size: 1.1rem;
      font-weight: 600;
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: var(--transition);
      margin-top: 1rem;
      box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .signin-box button:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 20px rgba(67, 97, 238, 0.4);
    }

    .signin-box .link {
      text-align: center;
      margin-top: 1.5rem;
      font-size: 0.95rem;
      color: var(--dark);
    }

    .signin-box .link a {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
      transition: var(--transition);
    }

    .signin-box .link a:hover {
      color: var(--primary-dark);
      text-decoration: underline;
    }

    .forgot-password {
      text-align: right;
      margin: 0.5rem 0;
    }

    .forgot-password a {
      color: var(--primary);
      font-size: 0.85rem;
      text-decoration: none;
    }

    .forgot-password a:hover {
      text-decoration: underline;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    
    canvas {
      display: block;
    }

    @media (max-width: 480px) {
      .signin-box {
        padding: 1.5rem;
      }
      
      .signin-box h2 {
        font-size: 1.8rem;
      }
    }
  </style>
</head>
<body>

  <img class="background" src="back.jpg" alt="Background" />
  <canvas class="particles" id="particles"></canvas>

  <div class="signin-container">
    <div class="signin-box">
      <h2>Sign In</h2>
      <form action="/signinj" method="POST">
        <div class="input-group">
          <i class="fas fa-user"></i>
          <input type="text" name="email" placeholder="Username or Email" required />
        </div>
        
        <div class="input-group">
          <i class="fas fa-lock"></i>
          <input type="password" name="password" placeholder="Password" required />
        </div>
        
       
        
        <button type="submit">Sign In</button>
        <div class="link">
          Already have an account? <a href="/signupj">Sign Up</a>
        </div>
      </form>
    </div>
  </div>

  <script>
    
    const canvas = document.getElementById('particles');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const particles = [];
    const particleCount = window.innerWidth < 768 ? 30 : 60;

    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 3 + 1;
        this.speedX = Math.random() * 1 - 0.5;
        this.speedY = Math.random() * 1 - 0.5;
        this.opacity = Math.random() * 0.6 + 0.1;
      }

      update() {
        this.x += this.speedX;
        this.y += this.speedY;

        if (this.x > canvas.width || this.x < 0) this.speedX *= -1;
        if (this.y > canvas.height || this.y < 0) this.speedY *= -1;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
        ctx.fill();
      }
    }

    function init() {
      for (let i = 0; i < particleCount; i++) {
        particles.push(new Particle());
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      for (let i = 0; i < particles.length; i++) {
        particles[i].update();
        particles[i].draw();
      }
      
      connectParticles();
      requestAnimationFrame(animate);
    }

    function connectParticles() {
      for (let a = 0; a < particles.length; a++) {
        for (let b = a; b < particles.length; b++) {
          const dx = particles[a].x - particles[b].x;
          const dy = particles[a].y - particles[b].y;
          const distance = Math.sqrt(dx * dx + dy * dy);

          if (distance < 100) {
            ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance/100})`;
            ctx.lineWidth = 0.5;
            ctx.beginPath();
            ctx.moveTo(particles[a].x, particles[a].y);
            ctx.lineTo(particles[b].x, particles[b].y);
            ctx.stroke();
          }
        }
      }
    }

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    init();
    animate();
  </script>
</body>
</html>